This is a Log which keeps track of our meetings and progress in general.

Template:

***************BEGIN******************
Date: weekday. Month Day, 2018.

Topic:

Summary:

================END===================



***************BEGIN******************
Date: Tue. Jan 23, 2018.

Topic: Brainstorming ideas for the project language.

Summary: 
We discussed potential ideas for the language we will be creating:
1. A "graph" language that fascilitates handling of graph data structure.
2. A "mechanics" language that helps calculation in terms of mechanical physics.
3. A form processing/generating language that makes it easy to generate a form(for things like
survey), and process the statistics contained within a form.

Now everything really sounds just like extra libraries, we are trying to come up with something that
can qualify our project as a new "language"; also, a general-purpose langauge seems way too complex,
and we will probably focus on DSL.

================END===================



***************BEGIN******************
Date: Tue. Jan 30, 2018.

Topic: Implementing basic syntaxes for the "graph" language idea.

Summary: 
We narrowed down our ideas and decided to try implementing the "graph" language first.
Our main goal is to create a set of useful and simplicit syntaxes so that programmers can
easily utilize our "graph" language.

For instance, the programmer might have to find connections between cities on a map, and
he or she simply needs to type in:
(define-graph ...)
(define-nodes (...) (...) ...)
(find-path (graph ...) (origin ...) (destination ...))

We also found several challenges:
1. The data representation for graph, we know there are edge-centered, node-centered, and adjacency
matrix representations. However, it's hard to decide which one to use as our default.
2. How to properly translate the syntax into racket code. (when user adds a node to a graph, we have to use
the set! function to update the pre-defined graph.)
3. How to support more complicated nodes and edges, so that they can contain user-defined
information fields(such as node-value, or edge-cost ...)

================END===================



***************BEGIN******************
Date: Wed. Jan 31, 2018.

Topic: Implementing more syntaxes for "racket-graph", and separate modules into different files.

Summary:
We finished the basic implementation for the "graph" language and decided to name it "racket-graph"
for now. 
For instance, now we have syntax and notations for initiate a graph, nodes, add nodes to graph, and
find all the paths bewtween two nodes(circular path allowed, termination guaranteed).

We also talked to Professor Felleisen about this idea, and made following conclusions after the
discussion:
1. We must further narrow down our language, and find our target users(for web-developers? traffic
managers? linkedIn-like tasks....)
2. Then, based on the target users of our language, we can construct a table of basic functionality
required for this language, and we must implement the functions in racket itself first.
3. After finishing implementation of the functions in racket, we can customize the syntax and
notations of our own languages, and build syntax-transformers to parse them into the functions we
built in racket.

Extra:
1. Other than graph, we can also look back to the projects we did during last semester in racket,
and see if we can generalize any of the problem to a domain of problems, and build a language to
handle problems in that specific domain.

================END===================


***************BEGIN******************
Date: Tue. Feb 6, 2018.

Topic: Brainstorming other ideas, and functionalities for racket-graph

Summary:
We discussed several other potential languages for our project, besides the graph idea we came up
last time. They include:
1. A language to allow programmers make story-game, as long as they provide the images, texts, and 
   describe the relationship between scenes. (for instance, scene 1 contains ..., can connect to
   scene 2, 5, ...)

2. A language to allow programmers manipulate boolean algebra. The input will be boolean formula,
   and a pre-defined set of operations on those formula such as:
   a. make ascii truth table.
   b. apply De-Morgan's law
   c. construct DNF/CNF formula
   d. simplification??? (this could be extremely difficult)

We also disccused how we can further develope the graph language we had in mind. Primarily, we
decided to have one source file representing only one single graph, and simplies the syntax as much
as possible so that programmers could transform a dataset into the source code of this language:
  Traffic data(connections between stations, estimated time, available transportations...)
  ->
  nodes and edges
  ->
  output desired path, with any necessary constraints.
Also, we decided that we could provide a functionality that translates the graph into a 
DOT source code, so that we can have the DOT program generate an image of the graph, without
having to implement any GUI in our language, which takes a substantial amount of work.


Next step would be:
1. Implement the algorithms in racket, and try to translate a graph into a DOT source code.
2. Add functionality that allows programmers  to specify constraints on the result.
3. Add functionality to support node that contains information within themselves.
================END===================




***************BEGIN******************
Date: Fri. Feb 16, 2018

Topic: Switching gear to a new language

Summary:
Since our current assignment has been targeting towards implementation of a "network lang", which
resembles our idea of graph language, we decided to narrow down our language choice even further,
both to avoid conflict with what we are doing for assignment, and to have more fun.

We decided to implement a language that helps programmer make travel plan/schedule.

Ideally, the programmer would input his origin, destination, and all the flights/train/... whatever
transportation that connect the two places(if they are connectable at all)

The information for any single transportation include:
Origin, Monetary Cost, Time Start, Time Duration, Destination.

The program could consist of these definitions, and some inquiries the programmer specifies.
For instance:

All paths that arrives before ...(arrival time specification)
All paths that cost no more than ...(monetary specification)
All paths that go through/not go through ...(intermediate stops specification)

Or, we could simply have the programmer specify a range for time and cost (could be open ended range)

Next step would be:
1. Clean up the libraries first,
2. Print out the final result nicely.
3. Set up grammar and syntax
================END===================




***************BEGIN******************
Date: Tue. Feb 27, 2018.

Topic: Significant change to data representation and Finalizing Design

Summary:
We are finalizing our language design, in terms of 
Vocabulary, Scope, Grammar, Semantics.

The goal of the language is roughly the same as described in our last Memo. 
However, this time, we realized the issue of Time-zone when we are dealing with international
flight schedule management. We had to make significant changes in our underlying data definition
to accomodate that. 

We also realized that our language is quite limited as it focuses on solving a specific type of
problem -- travel/transportation schedule planning.

Right now, the mechanical part of the language building process is nearly complete, so
we will focus on designing a convenient syntax for our clients.

We shall focus on the following aspects:
1. Good error messages.
2. Readable output of program.
3. Readable syntax.
================END===================

